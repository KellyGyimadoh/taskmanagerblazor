@page "/"
@inject NavigationManager NavigationManager
@inject UserTaskClient TaskClient
@inject PriorityClient PriorityClient
@inject IJSRuntime JS
@rendermode InteractiveServer


<PageTitle>All Tasks</PageTitle>

<Header Title="ALL TASK" />

<BodyCard CardTitle="All Tasks">
    <div class="row mt-3 mb-3">
        <div class="col-12 d-flex justify-content-center">
            <div class="d-flex justify-content-center">
                <InputText id="search" @bind-Value="@searchQuery" placeholder="Search for a task"
                    class="form-control" />
                <div class="d-flex justify-content-end">
                    <InputSelect id="filter" @bind-Value="@selectedFilterOption">
                        <option value="All">All</option>
                        <option value="priorityfilter">Filter By Priority</option>
                        <option value="datefilter">Filter By Date</option>
                    </InputSelect>
                </div>
                <button class="btn btn-success ms-2" @onclick="FilterTaskAction">Search</button>
            </div>
        </div>
    </div>

    @if (filteredTasks == null || !filteredTasks.Any())
    {
        <p><em>No tasks found..Loading..</em></p>
    }
    else
    {
        <SfGrid DataSource="@filteredTasks" AllowPaging="true">
            <GridColumns>
               <GridColumn HeaderText="No" Width="120" Template="@((context) => CountTemplate((UserTask)context, filteredTasks?.ToList().IndexOf((UserTask)context) ?? 0))"></GridColumn>
        <GridColumn Field=@nameof(UserTask.Name) HeaderText="Task Name" Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserTask.Description) HeaderText="Description" Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserTask.Priority) HeaderText="Priority Level" Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserTask.DeadlineDate) HeaderText="Due Date" Format="d" Width="150"></GridColumn>
                <GridColumn HeaderText="Status" Width="150" Template="@((context) => StatusTemplate((UserTask)context))">
                </GridColumn>
                <GridColumn HeaderText="Mark as Done" Width="150"
                    Template="@((context) => MarkAsDoneTemplate((UserTask)context))"></GridColumn>
                <GridColumn HeaderText="Action" Width="150" Template="@((context) => ActionTemplate((UserTask)context))">
                </GridColumn>
            </GridColumns>
        </SfGrid>
    }
</BodyCard>

@code {
    private UserTask[]? filteredTasks;
    private string searchQuery = string.Empty;
    private string selectedFilterOption = "All";

    protected override async Task OnInitializedAsync()
    {
        if (this == null) return;
        filteredTasks = await TaskClient.GetUserTasksAsync();
    }



    private async Task ChangeStatusAsync(UserTask task)
    {
        task.Status = !task.Status;

        try
        {
            var updatedTask = new UserTask
                        {
                            Id = task.Id,
                            Status = task.Status,
                            Name = task.Name,
                            PriorityId = task.PriorityId
                        };

            await TaskClient.UpdateTaskStatusAsync(updatedTask);

            var taskInFilteredList = filteredTasks?.FirstOrDefault(t => t.Id == task.Id);
            if (taskInFilteredList != null)
            {
                taskInFilteredList.Status = task.Status;
            }

            // Reapply filtering to maintain the current view
            FilterTaskAction();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task status: {ex.Message}");
        }
    }

    private void FilterTaskAction()
    {
        if (filteredTasks == null) return;

        IEnumerable<UserTask> tasks = filteredTasks;

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var searchTerm = searchQuery.ToLower();
            tasks = tasks.Where(t => t.Name.ToLower().Contains(searchTerm) ||
    (t.Description?.ToLower() ?? string.Empty).Contains(searchTerm));
        }

        switch (selectedFilterOption)
        {
            case "priorityfilter":
                tasks = tasks.OrderByDescending(t => t.PriorityId);
                break;
            case "datefilter":
                tasks = tasks.OrderBy(t => t.DeadlineDate);
                break;
        }

        filteredTasks = tasks.ToArray();
    }

    private RenderFragment StatusTemplate(UserTask context) => @<div>
        <button class="@(context.Status ? "btn btn-success" : "btn btn-warning")">
            @(context.Status ? "Completed" : "Pending")
        </button>
    </div>;

    private RenderFragment MarkAsDoneTemplate(UserTask context) => @<button
        class="@(context.Status ? "btn btn-primary" : "btn btn-dark")" @onclick="() => ChangeStatusAsync(context)">
        @(context.Status ? "Undo" : "Mark As Done")
    </button>;

    private RenderFragment ActionTemplate(UserTask context) => @<div class="d-flex">
        <a href="@TaskUrl(context.Id)" class="btn btn-primary me-2">
            <i class="bi bi-pencil-square"></i>
        </a>
        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(context)">
            <i class="bi bi-trash"></i>
        </button>
    </div>;

  private RenderFragment CountTemplate(UserTask context, int index) => @<text>@(index + 1)</text>;

    private static string TaskUrl(int id) => $"editTask/{id}";

    private string GetDeleteModalId(UserTask task) => $"#{DeleteTask.GetModalId(task)}";

    private string GetRowClass(bool isCompleted) => isCompleted ? "table-danger text-decoration-line-through" : "";

    private string GetTaskNameClass(bool isCompleted) => isCompleted ? "table-danger text-decoration-line-through" : "";
}
