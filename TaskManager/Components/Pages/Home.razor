@page "/"
@inject NavigationManager NavigationManager
@inject UserTaskClient TaskClient
@inject PriorityClient PriorityClient
@inject IJSRuntime JS
@rendermode InteractiveServer


<style>
    .custom-font {
        font-size: 20px;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }
</style>
<PageTitle>All Tasks</PageTitle>

<Header Title="ALL TASK" />


<SfSpinner @bind-Visible="@spinnerVisible" Label="Loadind Data..." Size="50" Type="@SpinnerType.Bootstrap5"></SfSpinner>

@if (filteredTasks != null)
{
    <BodyCard CardTitle="All Tasks">
        <div class="row mt-3 mb-3">
            <div class="col-12 d-flex justify-content-center">
                <div class="d-flex justify-content-center">
                    <InputText id="search" @bind-Value="@searchQuery" placeholder="Search for a task"
                        class="form-control" />
                    <div class="d-flex justify-content-end">
                        <InputSelect id="filter" @bind-Value="@selectedFilterOption">
                            <option value="All">All</option>
                            <option value="priorityfilter">Filter By Priority</option>
                            <option value="datefilter">Filter By Date</option>
                        </InputSelect>
                    </div>
                    <button class="btn btn-success ms-2" @onclick="FilterTaskAction">Search</button>
                </div>
            </div>
        </div>


        <SfGrid  DataSource="@filteredTasks" 
        Style="font-family: Verdana, Geneva, Tahoma, sans-serif; font-size:15px;" 
        AllowPaging="true" Width="auto" EnableStickyHeader=true>
            <GridPageSettings PageSize="5" PageCount="3" PageSizes="@pagerDropDown"></GridPageSettings>

            <GridColumns>
                <GridColumn HeaderText="No" Width="50"
                    Template="@((context) => CountTemplate((UserTask)context, filteredTasks?.ToList().IndexOf((UserTask)context) ?? 0))">
                </GridColumn>
                <GridColumn Field=@nameof(UserTask.Name) HeaderText="Task Name" Width="150"  
                Template="@((context)=>TaskNameTemplate((UserTask)context))" ></GridColumn>
                <GridColumn Field=@nameof(UserTask.Description) HeaderText="Description" Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserTask.Priority) HeaderText="Priority Level" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                <GridColumn Field=@nameof(UserTask.DeadlineDate) HeaderText="Due Date" Format="d" Width="100"></GridColumn>
                <GridColumn HeaderText="Status" Width="150" Template="@((context) => StatusTemplate((UserTask)context))">
                </GridColumn>
                <GridColumn HeaderText="Mark as Done" Width="150"
                    Template="@((context) => MarkAsDoneTemplate((UserTask)context))"></GridColumn>
                <GridColumn HeaderText="Action" Width="150" Template="@((context) => ActionTemplate((UserTask)context))">
                </GridColumn>
            </GridColumns>
        </SfGrid>
           <div class="d-flex justify-content-start mt-2">
            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteAllModal()" >Clear All</button>
           <DeleteTask />
           </div>
    </BodyCard>
}

@code {
    private UserTask[]? originalTasks; // Holds the original list of tasks
    private UserTask[]? filteredTasks; // Holds the filtered tasks
    private string searchQuery = string.Empty;
    private string selectedFilterOption = "All";

    public bool spinnerVisible { get; set; }
    private static string statusClass(bool isTrue) => (isTrue ? "e-success" : "e-warning");
    public string[] pagerDropDown { get; set; } = new string[] { "All", "5", "10", "15", "20" };

    protected override async Task OnInitializedAsync()
    {
        if (this == null) return;
        spinnerVisible = true;
        await Task.Delay(1000);
        originalTasks = await TaskClient.GetUserTasksAsync();
        filteredTasks = originalTasks; // Initially, filteredTasks is the same as originalTasks
        spinnerVisible = false;
    }
  private RenderFragment TaskNameTemplate(UserTask context) => @<span class="@GetTaskNameClass(context.Status)">
    @context.Name
</span>;




    private async Task ChangeStatusAsync(UserTask task)
    {
        task.Status = !task.Status;

        try
        {
            var updatedTask = new UserTask
            {
                Id = task.Id,
                Status = task.Status,
                Name = task.Name,
                PriorityId = task.PriorityId
            };

            await TaskClient.UpdateTaskStatusAsync(updatedTask);

            var taskInFilteredList = filteredTasks?.FirstOrDefault(t => t.Id == task.Id);
            if (taskInFilteredList != null)
            {
                taskInFilteredList.Status = task.Status;
            }

            // Reapply filtering to maintain the current view
            FilterTaskAction();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task status: {ex.Message}");
        }
    }

    private void FilterTaskAction()
    {
        if (originalTasks == null) return; // Ensure originalTasks is not null

        IEnumerable<UserTask> tasks = originalTasks; // Start with the original list

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var searchTerm = searchQuery.ToLower();
            tasks = tasks.Where(t => t.Name.ToLower().Contains(searchTerm) ||
                (t.Description?.ToLower() ?? string.Empty).Contains(searchTerm));
        }

        switch (selectedFilterOption)
        {
            case "priorityfilter":
                tasks = tasks.OrderByDescending(t => t.PriorityId);
                break;
            case "datefilter":
                tasks = tasks.OrderBy(t => t.DeadlineDate);
                break;
            case "All":
                // Reset to original order
                filteredTasks = originalTasks.ToArray();
                return;
        }

        filteredTasks = tasks.ToArray();
    }

    private RenderFragment StatusTemplate(UserTask context) => @<div>
        <button class="@(context.Status ? "btn btn-success" : "btn btn-warning")">
            @(context.Status ? "Completed" : "Pending")
        </button>
    </div>;

    private RenderFragment MarkAsDoneTemplate(UserTask context) => @<button
        class="@(context.Status ? "btn btn-primary" : "btn btn-dark")" @onclick="() => ChangeStatusAsync(context)">
        @(context.Status ? "Undo" : "Mark As Done")
    </button>;

    private RenderFragment ActionTemplate(UserTask context) => @<div class="d-flex">
        <a href="@TaskUrl(context.Id)" class="btn btn-primary me-2">
            <i class="bi bi-pencil-square"></i>
        </a>
        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(context)">
            <i class="bi bi-trash"></i>
        </button>
        <DeleteTask Task="context" />
    </div>;

    private RenderFragment CountTemplate(UserTask context, int index) => @<text>@(index + 1)</text>;

    private static string TaskUrl(int id) => $"editTask/{id}";

    private string GetDeleteModalId(UserTask task) => $"#{DeleteTask.GetModalId(task)}";
    private string GetDeleteAllModal() => $"#{DeleteTask.GetDeleteAllModal()}";
    

    private string GetRowClass(bool isCompleted) => isCompleted ? "table-danger text-decoration-line-through" : "";

    private string GetTaskNameClass(bool isCompleted) => isCompleted ? "table-danger text-decoration-line-through" : "";
}
